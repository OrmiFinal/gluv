name: Deploy

on:
  push:
    branches: [ "main" ]
    
jobs:
  setup-server:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: 코드 배포
        run: |
            mkdir -p ~/.ssh
            echo "${{ secrets.AWS_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
            chmod 600 ~/.ssh/id_rsa
            ssh-keyscan -t rsa ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts
            chmod 644 ~/.ssh/known_hosts
            ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.AWS_SSH_USER }}@${{ secrets.SERVER_HOST }} 'mkdir -p ~/gluv'
            scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa -r ./* ${{ secrets.AWS_SSH_USER }}@${{ secrets.SERVER_HOST }}:~/gluv
        
      - name: 이전 서비스 종료
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }} 
          username: ${{ secrets.AWS_SSH_USER }}
          key: ${{ secrets.AWS_SSH_PRIVATE_KEY }}
          script: |
            cd ~/gluv/BE
            chmod +x stop_services.sh
            ./stop_services.sh
            cd ~/gluv/docker_redis
            sudo docker-compose down

      - name: 새로운 서비스 시작
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }} 
          username: ${{ secrets.AWS_SSH_USER }}
          key: ${{ secrets.AWS_SSH_PRIVATE_KEY }}
          script: |
            cd ~/gluv/BE
            echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" > .env
            echo "DJANGO_SETTINGS_MODULE=${{ secrets.DJANGO_SETTINGS_MODULE }}" >> .env
            echo "REDIS_KEY=${{ secrets.REDIS_KEY }}" >> .env
            echo "DEBUG=${{ secrets.DEBUG }}" >> .env
            echo "REDIS_KEY=${{ secrets.REDIS_KEY }}" >> .env
            echo "REDIS_HOST_PASSWORD=${{ secrets.REDIS_KEY }}" > ~/gluv/docker_redis/.env
            echo "ttbkey=${{ secrets.BOOK_API_KEY }}" >> .env
            python3 -m venv venv
            source venv/bin/activate
            pip install -r ./requirements.txt
            python manage.py makemigrations
            python manage.py migrate
            nohup gunicorn -b 0.0.0.0:8000 gluv.wsgi:application > asgi_output.log 2>&1 &
            nohup uvicorn gluv.asgi:application --host 0.0.0.0 --port 8001 > asgi_output.log 2>&1 &
            nohup celery -A gluv worker > task_worker.log 2>&1 &
            nohup celery -A gluv beat > task_beat.log 2>&1 &
            cd ~/gluv/docker_redis
            sudo docker-compose up -d
          

